/**

SENG1120 Assignment 3
Created by Alex McClung, 3256853
Semester 2 2016

**/

#include <string>
#include <iostream>

using namespace std;
namespace alex_m
{

// Constructor
template <typename Object>
BTree<Object>::BTree()
{
  //Initialise member variables
  root_ = NULL;
}

// Destructor
template <typename Object>
BTree<Object>::~BTree()
{
  //Clear the entire tree
  remove_all();
}

template <typename Object>
size_t BTree<Object>::tree_count() const
{
  return size;
}

template <typename Object>
Object BTree<Object>::get_current() const
{
  //Derefrerence and return the current ptr
  return current_ptr->data();
}

template <typename Object>
void BTree<Object>::set_current(const Object& entry) const
{
  //Set the value of the current ptr
  current_ptr->set_data(entry);
}

template <typename Object>
template <typename Predicate>
void BTree<Object>::removeif(Predicate p)
{
  removeif(root_, p);
}

template <typename Object>
template <typename Predicate>
void BTree<Object>::removeif(BTNode<Object>* node, Predicate p)
{

  //Recursively traverses the tree postorder
  //Calls the "predicate" function with the an Object (template type) as parameter

  if (node != NULL)
  {

    removeif(node->left(), p);
    removeif(node->right(), p);

    // If the result of the evaluating the predicate function on the
    // Object stored in node is true: then the node is removed from the tree
    if (p(node->data())) { remove(node); }
  }
}

template <typename Object>
void BTree<Object>::remove_all()
{
  //Delete all nodes in the tree by traversing the entire tree
  remove_all(root_);
}

template <typename Object>
void BTree<Object>::remove_all(BTNode<Object>* node)
{
  //Delete all nodes in the tree by traversing the entire tree
  if (node != NULL)
  {
    remove_all(node->left());
    remove_all(node->right());
    remove(node);
  }
}

template <typename Object>
bool BTree<Object>::remove(BTNode<Object>* node_to_remove)
{

  //Modified Remove Algorithm from lab 10 (without the comparision at begining)

  if (node_to_remove == NULL) { return false; }

  //Several cases
  //Case 1: Remove Leaf node
  if (node_to_remove->is_leaf())
  {
    //Root case
    if (root_ == node_to_remove) { root_ = NULL;  }

    else
    {
      //Not root
      //Update parent links
      if (node_to_remove->is_left_child()) { node_to_remove->parent()->set_left(NULL); }
      else { node_to_remove->parent()->set_right(NULL);  }
    }

    delete node_to_remove;
    size--;
  }

  //Case 2: Remove node with one child
  else if (node_to_remove->has_single_child())
  {
    //If we are removing the root node
    if (root_ == node_to_remove)
    {
      if (node_to_remove->right() != NULL)
      {
        node_to_remove->right()->set_parent(NULL);
        root_ = node_to_remove->right();
      }

      // right is NULL, node_to_remove has a child: this implies left must not be NULL
      else
      {
        node_to_remove->left()->set_parent(NULL);
        root_ = node_to_remove->left();
      }
    }
    else
    {
      //Removing node with a right child
      if (node_to_remove->right() != NULL)
      {
        node_to_remove->right()->set_parent(node_to_remove->parent());

        if (node_to_remove->is_right_child()) { node_to_remove->parent()->set_right(node_to_remove->right()); }
        else { node_to_remove->parent()->set_left(node_to_remove->right()); }
      }

      //Removing node with a left child
      else
      {
        node_to_remove->left()->set_parent(node_to_remove->parent());

        if (node_to_remove->is_right_child()) { node_to_remove->parent()->set_right(node_to_remove->left()); }
        else { node_to_remove->parent()->set_left(node_to_remove->left()); }
      }
    }
    delete node_to_remove;
    size--;
  }

  //Case 3: Remove Node with two children
  else
  {
    BTNode<Object>* temp = find_min(node_to_remove->left());
    Object swap(temp->data());
    node_to_remove->set_data(swap);
    remove(temp);
  }
  return true;
}

template <typename Object>
BTNode<Object>* BTree<Object>::find_min(BTNode<Object>* node) const
{
  if (node->right() != NULL) { return find_min(node->right()); }
  else { return node; }
}

template <typename Object>
bool BTree<Object>::goto_root()
{
  //Set the current ptr to the root of the tree
  if (root_ != NULL) { current_ptr = root_; return true; }
  return false;
}

template <typename Object>
bool BTree<Object>::goto_left()
{
  if (current_ptr != NULL && current_ptr->left() != NULL) { current_ptr = current_ptr->left(); return true; }
  return false;
}

template <typename Object>
bool BTree<Object>::goto_right()
{
  if (current_ptr != NULL && current_ptr->right() != NULL) { current_ptr = current_ptr->right(); return true;}
  return false;
}

template <typename Object>
bool BTree<Object>::goto_parent()
{
  if (current_ptr != NULL && current_ptr->parent() != NULL) { current_ptr = current_ptr->parent(); return true; }
  return false;
}

template <typename Object>
void BTree<Object>::tree_insert(const Object& entry)
{
  if (empty()) { root_ = new BTNode<Object>(entry); }
  else { add(root_, entry); }
  size++;
}

template <typename Object>
std::string BTree<Object>::toString() const
{
  return toString(root_, 0);
}

template <typename Object>
std::string BTree<Object>::toString(BTNode<Object>* node, size_t level) const
{
  std::string str = "";
  if (node != NULL)
  {
    // Right sub-tree
    str += toString(node->right(), level + 1);
    // Indent to indicate level
    for (size_t i = 1; i <= level; ++i) { str = str + "| "; }
    // Current node
    str += node->data().get_name() + "\n";
    // Left sub-tree
    str += toString(node->left(), level + 1);
  }
  return str;
}

template <typename Object>
size_t BTree<Object>::countInRange(int low, int high) const
{
  return countInRange(root_, low, high);
}

// Returns count of nodes in BST in range [low, high]
template <typename Object>
size_t BTree<Object>::countInRange(BTNode<Object>* node, int low, int high) const
{
  int count = 0;

  if (node != NULL)
  {
    if (node->data().is_grade_in_range(low, high)) { count = 1; }
    count += countInRange(node->left(), low, high) + countInRange(node->right(), low, high);
  }
  return count;
}

template <typename Object>
bool BTree<Object>::empty() const
{
  //Returns true if the tree is empty (nothing stored in the root node)
  return (root_ == NULL);
}


template <typename Object>
std::string BTree<Object>::inOrder() const
{
  return inOrder(root_);
}

template <typename Object>
std::string BTree<Object>::inOrder(BTNode<Object>* node) const
{
  std::string printed;

  if (node != NULL)
  {
    printed += inOrder(node->left());
    printed = printed + node->data() + " ";
    printed += inOrder(node->right());
  }

  return printed;
}

// Average should be moved to ClassroomOfStudents to make a generic tree class
template <typename Object>
float BTree<Object>::average() const
{
  return average(root_) / tree_count();
}

template <typename Object>
float BTree<Object>::average(BTNode<Object>* node) const
{
  float average_sum = 0;

  if (node != NULL)
  {
    average_sum += average(node->left());
    average_sum = average_sum + node->data(); //Overload += for student
    average_sum += average(node->right());
  }
  return average_sum;
}

template <typename Object>
void BTree<Object>::add(BTNode<Object>* node, Object it) const
{
  int relation = it.compare_to(node->data());

  if (relation == 0)
  {
    // comparision 0: Replace existing Object
    node->set_data(it);
  }

  else if (relation > 0)
  {
    // comparision 1: Work on right side
    if (node->right() == NULL)
    {
      BTNode<Object>* new_node = new BTNode<Object>(it);
      new_node->set_parent(node);
      node->set_right(new_node);
    }

    //Right is not empty, recur
    else
    {
      add(node->right(), it);
    }
  }

  else
  {
    if (node->left() == NULL)
    {
      // Work on left side
      // comparision -1: and left is empty
      BTNode<Object>* new_node = new BTNode<Object>(it);
      new_node->set_parent(node);
      node->set_left(new_node);
    }

    // comparision -1: and left is not empty, recur
    else
    {
      add(node->left(), it);
    }
  }
}

}